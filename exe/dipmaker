#!/usr/bin/env ruby

require 'digest'
require 'fileutils'
require 'find'
require 'hexapdf'
require 'mimemagic'
require 'mustache'
require 'nokogiri'
require 'pathname'
require 'require_all'
require 'securerandom'
require_all 'lib'

DESIRED_MIME_TYPES = [
    'image/tiff',
    'application/pdf',
    'application/xml',
    'text/plain',
    'audio/mp3',
    'audio/mpeg',
    'audio/ogg',
    'video/mp4',
]

JOB_CLASSES = [
    'tmp',
    'new',
    'working',
    'success',
    'failure',
]

SUPPORTED_TYPES = [
    'findingaid',
    'free_form',
    'multipage',
]

# This is a minimal rights statement usable by any package.  Finding aid
# collections will generally have more extensive rights statements, but
# are expected to include this statement at the end.
#
# --mps 2017-12-14
def rights_statement
    'Contact the Special Collections Research Center for information regarding rights and use of this collection.'
end

# Get a list of files we care about, along with
# a list of MIME types that are available.
def files_for(dir)
    unless File.exist? dir
        return [[], []]
    end
    required = []
    mime_types = {}
    Find.find(dir) do |path|
        if File.file? path
            # For speed we judge the MIME type by path.
            # Clients should verify the MIME type by more 
            # precise methods, for example:
            # 
            #   mime_type = MimeMagic.by_magic(File.open(path)).to_s
            #
            mime_type = MimeMagic.by_path(path).to_s
            if DESIRED_MIME_TYPES.include? mime_type
                required << path
                mime_types[mime_type] = 1
            end
        end
    end
    [required, mime_types]
end

def required_files(dir)
    required = []
    Find.find(dir) do |path|
        if File.file? path
            # For speed we judge the MIME type by path.
            # Clients should verify the MIME type by more 
            # precise methods, for example:
            # 
            #   mime_type = MimeMagic.by_magic(File.open(path)).to_s
            #
            mime_type = MimeMagic.by_path(path).to_s
            if DESIRED_MIME_TYPES.include? mime_type
                required << path
            end
        end
    end
    required
end

require 'trollop'
opts = Trollop::options do
    opt :aip_store, 'Path to AIP store', type: :string
    opt :aip, 'AIP id', type: :string
    opt :dip_store, 'Path to DIP store', type: :string
    opt :dip, 'DIP id', type: :string
    opt :ocr, 'OCR required', type: :boolean, default: false
    opt :pdf, 'PDF master', type: :boolean, default: false
    opt :format, 'Format -- "archival material" (default) or "images"', type: :string, default: 'archival material'
    opt :type, "Type -- support object types: #{SUPPORTED_TYPES.join(', ')}", type: :string, default: 'findingaid'
    opt :partial, "Look for files in a subdirectory of the AIP", type: :string, default: nil
end

# Default options
require 'pairtree'
aip_tree = Pairtree.at(opts[:aip_store], create: false)
aip = aip_tree.get(opts[:aip])
aip_data_dir = File.join aip.path, 'data'
dip_tree = Pairtree.at(opts[:dip_store], create: false)
dip_id = opts[:dip]
dip = dip_tree.mk(dip_id)
obj_type = opts[:type]

unless SUPPORTED_TYPES.include? obj_type
    STDERR.puts 'The requested type is not supported.'
    exit
end

case obj_type
when 'findingaid'

# Overview of DIP building process:
#
# Phase 1:
#  * Build DIP shell
#  * Open and hold METS reference
#  * Open and hold EAD reference
#  * Store copy of EAD in DIP

#  * Build DIP shell
data_dir = File.join dip.path, 'data'
FileUtils.mkdir_p data_dir
jobs_dir = File.join dip.path, 'jobs'
job_dir = File.join(jobs_dir, 'services')
JOB_CLASSES.each do |job_class|
    FileUtils.mkdir_p "#{job_dir}/#{job_class}"
end

partial = opts[:partial]
if partial
  aip_base_path = File.join aip.path, 'data', partial
  aip_data_dir = File.join aip.path, 'data', partial
else
  aip_base_path = File.join aip.path, 'data'
  aip_data_dir = File.join aip.path, 'data'
end

#  * Open and hold METS reference
aip_mets_path = File.join aip_base_path, 'mets.xml'
mets = Nokogiri::XML(IO.read aip_mets_path)

#  * Open and hold EAD reference
finding_aid_references = mets.xpath('//mets:file[@ID="MasterFindingAid"]/mets:FLocat')
if finding_aid_references.size == 0
    STDERR.puts 'Please reference the EAD from the METS file.'
    exit
end
ead_filename = finding_aid_references[0]['xlink:href']
base = File.basename ead_filename, '.xml'
dao_filename = ead_filename.gsub(/\.xml$/, '.dao.xml')
aip_ead_path = File.join aip_base_path, ead_filename
ead = Nokogiri::XML(IO.read aip_ead_path)

#  * Store copy of EAD in DIP
dip_ead_path = File.join dip.path, 'data', ead_filename
FileUtils.cp aip_ead_path, dip_ead_path

# Phase 2:
#  * Read EAD leaf component - container list pairs, using them to update
#    the EAD and METS and generate job requests
#  * Write out DAO EAD and DIP METS

section_number = 0
item_number = 0
if mets.xpath('//mets:fileSec').size > 0
    mets_fileSec = mets.xpath('//mets:fileSec').first
else
    mets_fileSec = Nokogiri::XML::Node.new 'mets:fileSec', mets
    mets.xpath('mets:mets').first.add_child mets_fileSec
end
mets_structMap = Nokogiri::XML::Node.new 'mets:structMap', mets
mets.xpath('mets:mets').first.add_child mets_structMap

#  * Add reference to DAO EAD

dao_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
dao_flocat['LOCTYPE'] = 'OTHER'
dao_flocat['xlink:href'] = File.basename dao_filename

dao_file = Nokogiri::XML::Node.new 'mets:file', mets
dao_file['ID'] = 'AccessFindingAid'
dao_file['MIMETYPE'] = 'application/xml'
dao_file['USE'] = 'access'
dao_file.add_child dao_flocat

mets.xpath('//mets:fileGrp[@ID="FileGrpFindingAid"]').first.add_child dao_file

rights = []
userestricts = ead.xpath('//xmlns:userestrict')
if userestricts.size > 0
    userestricts.first.xpath('xmlns:p').each do |p|
        rights << p.content
    end
end
rights << rights_statement
rights = rights.join('  ')

mets.xpath('//dc:rights', {'xmlns:dc' => "http://purl.org/dc/elements/1.1/"}).each do |r|
    r.content = rights
end

ead.xpath(component_xpath).each do |component|
    simple = true
    component.xpath('xmlns:did/xmlns:container').each do |container|
        if container['parent']
            simple = false
            break
        end
    end

    if simple
        path_components = component.xpath('xmlns:did/xmlns:container').map do |container|
            render(container)
        end
        paths = [path_components.join('/')]
    else
        section = {}
        section_ids = []
        component.xpath('xmlns:did/xmlns:container').each do |container|
            if container['parent']
                # Add this container to the parent's section
                section[container['parent']] << container.dup
                section[container['id']] = section[container['parent']]
            else
                # Create a new section
                section[container['id']] = [container.dup]
                section_ids << container['id']
            end
        end
        paths = section_ids.collect do |id|
            section[id].map {|c| render(c)}.join('/')
        end
    end

    paths = paths.collect do |path|
        File.join base, path
    end

    file_count = 0
    paths = paths.select do |path|
        dir = File.join aip_base_path, path
        files, mime_types = files_for(dir)
        file_count += files.size
        files.size > 0
    end

    next if paths.length == 0

    section_number += 1
    mets_section = Nokogiri::XML::Node.new 'mets:div', mets
    mets_section['TYPE'] = 'section'
    mets_section['LABEL'] = section_number
    mets_section['ORDER'] = section_number
    mets_structMap.add_child mets_section

    # Add the DAO here, since we are treating the multiple
    # boxes as a single unit of pagination
    puts "Section #{section_number}: #{file_count}"
    puts paths.join("\n")
    puts
    dao = Nokogiri::XML::Node.new 'dao', ead
    dao['entityref'] = "#{dip_id}_#{section_number}_1"

    component.xpath('xmlns:did').first.add_child dao

    paths.each do |path|
        dir = File.join aip_base_path, path
        files, mime_types = files_for(dir)

        # At this point we can begin to determine what jobs 
        # need to be performed
        items = []
        jobs = {}
        files.sort.each do |file|
            file_base = File.basename(file)
            relative_path = Pathname.new(file).relative_path_from(Pathname.new(aip_data_dir)).to_s
            relative_dir = File.dirname(relative_path)

            # Aggregate by (rough approximation of) basename
            item = relative_path.dup
            item.gsub!(/\.[^\.]*$/, '')
            item.gsub!(/[^0-9A-Za-z]/, '_')
            if not(jobs[item])
                jobs[item] = []
                items << item
            end

            # Short name for tile subdirectories
            item_base = File.basename(relative_path)
            item_base.gsub!(/\..*$/, '')
            item_base.gsub!(/[^0-9A-Za-z]/, '_')

            job_id = SecureRandom.uuid

            # An individual job should look like the following:
            #
            # {
            #   id: '6a8c6cb0-f2bd-4515-8f22-0671b15976c4',
            #   item: '56m307_Box_1_Folder_9_Seaton_1_9__11462',
            #   item_base: 'Seaton_1_9_11462',
            #   command: 'ocr',
            #   source: '/path/to/aip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.tif',
            #   target: '/path/to/dip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.txt',
            #   mime_type: 'text/plain',
            #   use: 'ocr',
            # }

            mime_type = MimeMagic.by_path(file).to_s
            case mime_type
            when 'image/tiff'
                # Produce a number of derivatives
                job_template = {
                    item: item,
                    item_base: item_base,
                    source: file,
                }

                # 'image/jpeg' - Thumbnail (width: 150px, _tb.jpg)
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'tiff2jpeg;150',
                    target: File.join(data_dir, relative_dir, "#{item_base}_tb.jpg"),
                    mime_type: 'image/jpeg',
                    use: 'thumbnail',
                })

                # 'image/jpeg' - Front thumbnail (width: 400px, _ftb.jpg)
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'tiff2jpeg;400',
                    target: File.join(data_dir, relative_dir, "#{item_base}_ftb.jpg"),
                    mime_type: 'image/jpeg',
                    use: 'front thumbnail',
                })

                # 'image/jpeg' - Reference image (same resolution as TIFF, .jpg)
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'tiff2jpeg',
                    target: File.join(data_dir, relative_dir, "#{item_base}.jpg"),
                    mime_type: 'image/jpeg',
                    use: 'reference image',
                })

                # 'application/pdf' - Print image (same resolution as TIFF, .pdf)
                unless mime_types['application/pdf']
                    jobs[item] << job_template.merge({
                        id: SecureRandom.uuid,
                        command: 'tiff2pdf',
                        target: File.join(data_dir, relative_dir, "#{item_base}.pdf"),
                        mime_type: 'application/pdf',
                        use: 'print image',
                    })

                    # need a better solution...
                    candidate_ocr_files = files.select {|name|
                      name =~ /\.txt$/
                    }.collect {|name|
                      File.basename(name, '.txt')
                    }
                    if opts[:ocr] and not(candidate_ocr_files.include? item_base)
                    #if opts[:ocr] and not(mime_types['text/plain'])
                        jobs[item] << job_template.merge({
                            id: SecureRandom.uuid,
                            command: 'ocr',
                            target: File.join(data_dir, relative_dir, "#{item_base}.txt"),
                            mime_type: 'text/plain',
                            use: 'ocr',
                        })
                    end
                end

            when 'application/pdf'
                use = opts[:pdf] ? 'master' : 'print image'
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'copy',
                    target: File.join(data_dir, relative_dir, "#{item_base}.pdf"),
                    mime_type: 'application/pdf',
                    use: use,
                })
                
                if opts[:ocr]
                    unless mime_types['application/xml']
                        jobs[item] << job_template.merge({
                            id: SecureRandom.uuid,
                            command: 'pdf2alto',
                            target: File.join(data_dir, relative_dir, "#{item_base}.xml"),
                            mime_type: 'application/xml',
                            use: 'coordinates',
                        })
                    end

                    unless mime_types['text/plain']
                        jobs[item] << job_template.merge({
                            id: SecureRandom.uuid,
                            command: 'pdf2text',
                            target: File.join(data_dir, relative_dir, "#{item_base}.txt"),
                            mime_type: 'text/plain',
                            use: 'ocr',
                        })
                    end
                end
            when 'application/xml'
                jobs[item] << {
                    id: job_id,
                    item: item,
                    item_base: item_base,
                    command: 'copy',
                    source: file,
                    target: File.join(data_dir, relative_dir, file_base),
                    mime_type: 'application/xml',
                    use: 'coordinates',
                }
            when 'text/plain'
                jobs[item] << {
                    id: job_id,
                    item: item,
                    item_base: item_base,
                    command: 'copy',
                    source: file,
                    target: File.join(data_dir, relative_dir, file_base),
                    mime_type: 'text/plain',
                    use: 'ocr',
                }
            when 'audio/mp3'
            when 'audio/mpeg'
                jobs[item] << {
                    id: job_id,
                    item: item,
                    item_base: item_base,
                    command: 'copy',
                    source: file,
                    target: File.join(data_dir, relative_dir, file_base),
                    mime_type: 'audio/mp3',
                    use: 'reference audio',
                }
            when 'audio/ogg'
                jobs[item] << {
                    id: job_id,
                    item: item,
                    item_base: item_base,
                    command: 'copy',
                    source: file,
                    target: File.join(data_dir, relative_dir, file_base),
                    mime_type: 'audio/ogg',
                    use: 'secondary reference audio',
                }
            when 'video/mp4'
                jobs[item] << {
                    id: job_id,
                    item: item,
                    item_base: item_base,
                    command: 'copy',
                    source: file,
                    target: File.join(data_dir, relative_dir, file_base),
                    mime_type: 'video/mp4',
                    use: 'reference video',
                }
            else
                # Ignore
            end
        end

        # Iterate over jobs, storing them and updating METS
        jobs_dir = File.join(dip.path, 'jobs')
        items.each_with_index do |item, index|
            order = index + 1

            mets_div = Nokogiri::XML::Node.new 'mets:div', mets

            # Add container for target files
            item_number += 1
            mets_fileGrp = Nokogiri::XML::Node.new 'mets:fileGrp', mets
            mets_fileGrp['ID'] = "FileGrp#{item_number}"
            mets_fileSec.add_child mets_fileGrp

            item_type = 'item'
            jobs[item].each do |job|
                if job[:mime_type] == 'audio/mp3'
                    item_type = 'audio'
                elsif job[:mime_type] == 'video/mp4'
                    item_type = 'video'
                elsif job[:mime_type] == 'image/jpeg'
                    if opts[:format] == 'images'
                        item_type = 'photograph'
                    end
                end

                fileid = [
                    job[:use].split(/\s+/).collect(&:capitalize).join,
                    'File',
                    Digest::MD5.hexdigest(job[:target]),
                ].join
                #puts fileid
                mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
                mets_fptr['FILEID'] = fileid
                mets_div.add_child mets_fptr

                mets_file = Nokogiri::XML::Node.new 'mets:file', mets
                mets_file['ID'] = fileid
                mets_file['USE'] = job[:use]
                mets_file['MIMETYPE'] = job[:mime_type]
                mets_fileGrp.add_child mets_file

                mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
                relative_target = Pathname.new(job[:target]).relative_path_from(Pathname.new(data_dir)).to_s
                mets_flocat['xlink:href'] = relative_target
                mets_flocat['LOCTYPE'] = 'OTHER'
                mets_file.add_child mets_flocat

                command = job[:command].dup
                command.gsub!(/;.*/, '')
                job_dir = File.join(jobs_dir, 'services')
                JOB_CLASSES.each do |job_class|
                    FileUtils.mkdir_p "#{job_dir}/#{job_class}"
                end
                File.open("#{job_dir}/tmp/#{job[:id]}", 'w') do |f|
                    f.write job.to_json
                end

                FileUtils.mv "#{job_dir}/tmp/#{job[:id]}", "#{job_dir}/new/#{job[:id]}"
            end

            label = order.to_s
            cxml = Nokogiri::XML(component.to_xml)
            unittitles = cxml.xpath('//unittitle')
            if unittitles.size > 0
                label = unittitles.first.content.strip
            else
                unitdates = cxml.xpath('//unitdate')
                if unitdates.size > 0
                    label = unitdates.first.content.strip
                end
            end

            mets_div['TYPE'] = item_type
            mets_div['LABEL'] = label
            mets_div['ORDER'] = order
            mets_section.add_child mets_div
        end
    end
end

dao_ead_path = File.join(data_dir, dao_filename)
File.open(dao_ead_path, 'w') do |f|
    f.write ead.to_xml
end

dip_mets_path = File.join(data_dir, 'mets.xml')
File.open(dip_mets_path, 'w') do |f|
    f.write mets.to_xml(indent: 2)
end

# free_form
when 'free_form'

# Phase 1:
#  * Build DIP shell
#  * Determine IDNO
#  * Open and hold METS template reference

#  * Build DIP shell
data_dir = File.join dip.path, 'data'
FileUtils.mkdir_p data_dir
jobs_dir = File.join dip.path, 'jobs'
job_dir = File.join(jobs_dir, 'services')
JOB_CLASSES.each do |job_class|
    FileUtils.mkdir_p "#{job_dir}/#{job_class}"
end

#  * Determine IDNO
template_location = nil
idno = nil

partial = opts[:partial]
locations = ['.', 'templates']
# XXX: Why add mets.xml here? --mps 2017-12-12
if partial
    locations = [partial, File.join(partial, 'templates'), File.join(partial, 'mets.xml')]
end

while not(idno) and locations.count > 0
    location = locations.shift
    path = File.join aip_data_dir, location
    path.gsub!(/\/\./, '')
    candidates = Dir.glob("#{path}/*.xml").reject {|f| f =~ /\/mets.xml$/}
    if candidates.count > 0
        template_location = candidates.first
        idno = File.basename template_location, '.xml'
        images_location = File.join File.dirname(template_location), idno
        images_location.gsub!(/templates/, 'sips')
    end
end

if not(idno or partial)
    # If we're processing a full package and there's just one directory,
    # then mets.xml is an acceptable template location.
    dirs = Dir.glob("#{aip_data_dir}/*").select {|f| File.directory? f}
    if dirs.count == 1 and File.exist?("#{aip_data_dir}/mets.xml")
        idno = File.basename dirs.first
        template_location = "#{aip_data_dir}/mets.xml"
        images_location = dirs.first
    end
end

if not(idno)
    STDERR.puts "ERROR: cannot determine METS template location"
    exit
end

puts "Template location: #{template_location}"
puts "Images location: #{images_location}"

#  * Open and hold METS template reference
mets_template = IO.read(template_location)

if mets_template !~ /{{current_timestamp}}/
    STDERR.puts "Support for new-style templates is not yet supported."
    exit
end

# Okay, fill out the "obvious" metadata, then switch to Nokogiri
metadata = {
    :current_year => Date.today.year,
    :current_timestamp => Time.new.strftime('%Y-%m-%dT%H:%M:%S'),
    :pagination => '',
}
mets_template = Mustache.render(mets_template, metadata)
mets = Nokogiri::XML(mets_template)

# Phase 2:
#  * Read images directory and determine pagination

item_number = 0
if mets.xpath('//mets:fileSec').size > 0
    mets_fileSec = mets.xpath('//mets:fileSec').first
else
    mets_fileSec = Nokogiri::XML::Node.new 'mets:fileSec', mets
    mets.xpath('mets:mets').first.add_child mets_fileSec
end
mets_structMap = Nokogiri::XML::Node.new 'mets:structMap', mets
mets.xpath('mets:mets').first.add_child mets_structMap

# Set rights statement
mets.xpath('//dc:rights', {'xmlns:dc' => "http://purl.org/dc/elements/1.1/"}).each do |r|
    r.content = rights_statement
end

files, mime_types = files_for(images_location)

items = []
jobs = {}
files.sort.each do |file|
    file_base = File.basename(file)
    relative_path = Pathname.new(file).relative_path_from(Pathname.new(aip_data_dir)).to_s
    relative_dir = File.dirname(relative_path)

    # Aggregate by (rough approximation of) basename
    item = relative_path.dup
    item.gsub!(/\.[^\.]*$/, '')
    item.gsub!(/[^0-9A-Za-z]/, '_')
    if not(jobs[item])
        jobs[item] = []
        items << item
    end

    # Short name for tile subdirectories
    item_base = File.basename(relative_path)
    item_base.gsub!(/\..*$/, '')
    item_base.gsub!(/[^0-9A-Za-z]/, '_')

    job_id = SecureRandom.uuid

    # An individual job should look like the following:
    #
    # {
    #   id: '6a8c6cb0-f2bd-4515-8f22-0671b15976c4',
    #   item: '56m307_Box_1_Folder_9_Seaton_1_9__11462',
    #   item_base: 'Seaton_1_9_11462',
    #   command: 'ocr',
    #   source: '/path/to/aip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.tif',
    #   target: '/path/to/dip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.txt',
    #   mime_type: 'text/plain',
    #   use: 'ocr',
    # }

    mime_type = MimeMagic.by_path(file).to_s
    job_template = {
        item: item,
        item_base: item_base,
        source: file,
    }

    case mime_type
    when 'image/tiff'
        # Produce a number of derivatives

        # 'image/jpeg' - Thumbnail (width: 150px, _tb.jpg)
        jobs[item] << job_template.merge({
            id: SecureRandom.uuid,
            command: 'tiff2jpeg;150',
            target: File.join(data_dir, relative_dir, "#{item_base}_tb.jpg"),
            mime_type: 'image/jpeg',
            use: 'thumbnail',
        })

        # 'image/jpeg' - Front thumbnail (width: 400px, _ftb.jpg)
        jobs[item] << job_template.merge({
            id: SecureRandom.uuid,
            command: 'tiff2jpeg;400',
            target: File.join(data_dir, relative_dir, "#{item_base}_ftb.jpg"),
            mime_type: 'image/jpeg',
            use: 'front thumbnail',
        })

        # 'image/jpeg' - Reference image (same resolution as TIFF, .jpg)
        jobs[item] << job_template.merge({
            id: SecureRandom.uuid,
            command: 'tiff2jpeg',
            target: File.join(data_dir, relative_dir, "#{item_base}.jpg"),
            mime_type: 'image/jpeg',
            use: 'reference image',
        })

        # 'application/pdf' - Print image (same resolution as TIFF, .pdf)
        unless mime_types['application/pdf']
            jobs[item] << job_template.merge({
                id: SecureRandom.uuid,
                command: 'tiff2pdf',
                target: File.join(data_dir, relative_dir, "#{item_base}.pdf"),
                mime_type: 'application/pdf',
                use: 'print image',
            })

            # need a better solution...
            candidate_ocr_files = files.select {|name|
              name =~ /\.txt$/
            }.collect {|name|
              File.basename(name, '.txt')
            }
            if opts[:ocr] and not(candidate_ocr_files.include? item_base)
            #if opts[:ocr] and not(mime_types['text/plain'])
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'ocr',
                    target: File.join(data_dir, relative_dir, "#{item_base}.txt"),
                    mime_type: 'text/plain',
                    use: 'ocr',
                })
            end
        end

    when 'application/pdf'
        use = opts[:pdf] ? 'master' : 'print image'
        jobs[item] << job_template.merge({
            id: SecureRandom.uuid,
            command: 'copy',
            target: File.join(data_dir, relative_dir, "#{item_base}.pdf"),
            mime_type: 'application/pdf',
            use: use,
        })

        if opts[:ocr]
            unless mime_types['application/xml']
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'pdf2alto',
                    target: File.join(data_dir, relative_dir, "#{item_base}.xml"),
                    mime_type: 'application/xml',
                    use: 'coordinates',
                })
            end

            unless mime_types['text/plain']
                jobs[item] << job_template.merge({
                    id: SecureRandom.uuid,
                    command: 'pdf2text',
                    target: File.join(data_dir, relative_dir, "#{item_base}.txt"),
                    mime_type: 'text/plain',
                    use: 'ocr',
                })
            end
        end
    when 'application/xml'
        jobs[item] << {
            id: job_id,
            item: item,
            item_base: item_base,
            command: 'copy',
            source: file,
            target: File.join(data_dir, relative_dir, file_base),
            mime_type: 'application/xml',
            use: 'coordinates',
        }
    when 'text/plain'
        jobs[item] << {
            id: job_id,
            item: item,
            item_base: item_base,
            command: 'copy',
            source: file,
            target: File.join(data_dir, relative_dir, file_base),
            mime_type: 'text/plain',
            use: 'ocr',
        }
    when 'audio/mp3'
        jobs[item] << {
            id: job_id,
            item: item,
            item_base: item_base,
            command: 'copy',
            source: file,
            target: File.join(data_dir, relative_dir, file_base),
            mime_type: 'audio/mp3',
            use: 'reference audio',
        }
    when 'audio/ogg'
        jobs[item] << {
            id: job_id,
            item: item,
            item_base: item_base,
            command: 'copy',
            source: file,
            target: File.join(data_dir, relative_dir, file_base),
            mime_type: 'audio/ogg',
            use: 'secondary reference audio',
        }
    when 'video/mp4'
        jobs[item] << {
            id: job_id,
            item: item,
            item_base: item_base,
            command: 'copy',
            source: file,
            target: File.join(data_dir, relative_dir, file_base),
            mime_type: 'video/mp4',
            use: 'reference video',
        }
    else
        # Ignore
    end
end

# Iterate over jobs, storing them and updating METS
jobs_dir = File.join(dip.path, 'jobs')
items.each_with_index do |item, index|
    order = index + 1

    mets_div = Nokogiri::XML::Node.new 'mets:div', mets

    # Add container for target files
    item_number += 1
    mets_fileGrp = Nokogiri::XML::Node.new 'mets:fileGrp', mets
    mets_fileGrp['ID'] = "FileGrp#{item_number}"
    mets_fileSec.add_child mets_fileGrp

    item_type = 'item'
    jobs[item].each do |job|
        if job[:mime_type] == 'audio/mp3'
            item_type = 'audio'
        elsif job[:mime_type] == 'video/mp4'
            item_type = 'video'
        elsif job[:mime_type] == 'image/jpeg'
            if opts[:format] == 'images'
                item_type = 'photograph'
            end
        end

        fileid = [
            job[:use].split(/\s+/).collect(&:capitalize).join,
            'File',
            Digest::MD5.hexdigest(job[:target]),
        ].join
        mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
        mets_fptr['FILEID'] = fileid
        mets_div.add_child mets_fptr

        mets_file = Nokogiri::XML::Node.new 'mets:file', mets
        mets_file['ID'] = fileid
        mets_file['USE'] = job[:use]
        mets_file['MIMETYPE'] = job[:mime_type]
        mets_fileGrp.add_child mets_file

        mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
        relative_target = Pathname.new(job[:target]).relative_path_from(Pathname.new(data_dir)).to_s
        mets_flocat['xlink:href'] = relative_target
        mets_flocat['LOCTYPE'] = 'OTHER'
        mets_file.add_child mets_flocat

        command = job[:command].dup
        command.gsub!(/;.*/, '')
        job_dir = File.join(jobs_dir, 'services')
        JOB_CLASSES.each do |job_class|
            FileUtils.mkdir_p "#{job_dir}/#{job_class}"
        end
        File.open("#{job_dir}/tmp/#{job[:id]}", 'w') do |f|
            f.write job.to_json
        end

        FileUtils.mv "#{job_dir}/tmp/#{job[:id]}", "#{job_dir}/new/#{job[:id]}"
    end

    label = order.to_s

    mets_div['TYPE'] = item_type
    mets_div['LABEL'] = label
    mets_div['ORDER'] = order
    mets_structMap.add_child mets_div
end

dip_mets_path = File.join(data_dir, 'mets.xml')
File.open(dip_mets_path, 'w') do |f|
    f.write mets.to_xml(indent: 2)
end

# multipage
when 'multipage'

# Packages should look like the following:
#
# data/
#   foobar.pdf <- single multipage PDF
#   mets.xml
#
# The resulting DIP shell will have a single job file,
# splitting foobar.pdf into pages named according to the
# pattern foobar/page_%04d.pdf .  (If the PDF has more than
# 9999 pages, the pattern will need to be updated
# accordingly.)
#
# Thus the resulting DIP should look like the following:
#
# data/
#   foobar/
#     page_0001.pdf
#     page_0002.pdf
#     ...
#     page_0144.pdf
#   mets.xml
#
# --mps 2017-12-14

# Phase 1:
#  * Build DIP shell
#  * Determine IDNO
#  * Open and hold METS template reference

#  * Build DIP shell
data_dir = File.join dip.path, 'data'
FileUtils.mkdir_p data_dir
jobs_dir = File.join dip.path, 'jobs'
job_dir = File.join(jobs_dir, 'services')
JOB_CLASSES.each do |job_class|
    FileUtils.mkdir_p "#{job_dir}/#{job_class}"
end

#  * Determine IDNO
the_pdf = nil
candidates = Dir.glob("#{aip_data_dir}/*.pdf")
if candidates.count > 0
    the_pdf = candidates.first
end

if the_pdf
    idno = File.basename the_pdf, '.pdf'
end

if not(idno)
    STDERR.puts "ERROR: cannot find base PDF"
    exit
end

puts "idno: #{idno}"

#  * Open and hold METS template reference
aip_mets_file = File.join aip_data_dir, 'mets.xml'
mets_template = IO.read(aip_mets_file)

if mets_template !~ /{{current_timestamp}}/
    STDERR.puts "Support for new-style templates is not yet supported."
    exit
end

# Okay, fill out the "obvious" metadata, then switch to Nokogiri
metadata = {
    :current_year => Date.today.year,
    :current_timestamp => Time.new.strftime('%Y-%m_%dT%H:%M:%S'),
    :pagination => '',
}
mets_template = Mustache.render(mets_template, metadata)
mets = Nokogiri::XML(mets_template)

# Phase 2:
#  * Add METS metadata, including rights
#  * Get PDF page count and determine pagination

#  * Add METS metadata, including rights
if mets.xpath('//mets:fileSec').size > 0
    mets_fileSec = mets.xpath('//mets:fileSec').first
else
    mets_fileSec = Nokogiri::XML::Node.new 'mets:fileSec', mets
    mets.xpath('mets:mets').first.add_child mets_fileSec
end
mets_structMap = Nokogiri::XML::Node.new 'mets:structMap', mets
mets.xpath('mets:mets').first.add_child mets_structMap

# Set rights statement
mets.xpath('//dc:rights', {'xmlns:dc' => "http://purl.org/dc/elements/1.1/"}).each do |r|
    r.content = rights_statement
end

#  * Get PDF page count and determine pagination
doc = HexaPDF::Document.open(the_pdf)
page_count = doc.pages.count
puts "page count: #{page_count}"

job_id = SecureRandom.uuid

# An individual job should look like the following:
#
# {
#   id: '6a8c6cb0-f2bd-4515-8f22-0671b15976c4',
#   item: '56m307_Box_1_Folder_9_Seaton_1_9__11462',
#   item_base: 'Seaton_1_9_11462',
#   command: 'ocr',
#   source: '/path/to/aip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.tif',
#   target: '/path/to/dip/data/56m307/Box_1/Folder_9/Seaton_1_9__11462.txt',
#   mime_type: 'text/plain',
#   use: 'ocr',
# }

job = {
    id: job_id,
    item: idno,
    item_base: idno,
    command: 'pdfsplit',
    source: the_pdf,
    target: File.join(data_dir, idno),
    mime_type: 'application/pdf',
    page_count: page_count,
}

if opts[:ocr]
    job['ocr_required'] = true
end

File.open("#{job_dir}/tmp/#{job[:id]}", 'w') do |f|
    f.write job.to_json
end
FileUtils.mv "#{job_dir}/tmp/#{job[:id]}", "#{job_dir}/new/#{job[:id]}"

# Add appropriate pages to METS
if page_count < 10000
    pattern = '%04d'
else
    pattern = '%0' + Math.log10(page_count).ceil.to_s + 'd'
end
(1..page_count).each do |page_number|
    order = page_number
    mets_div = Nokogiri::XML::Node.new 'mets:div', mets

    # Add container for target files
    mets_fileGrp = Nokogiri::XML::Node.new 'mets:fileGrp', mets
    mets_fileGrp['ID'] = "FileGrp#{page_number}"
    mets_fileSec.add_child mets_fileGrp

    # PDF
    target_pdf = File.join(idno, sprintf("page_#{pattern}.pdf", page_number))
    fileid = [
        'PrintImageFile',
        Digest::MD5.hexdigest(target_pdf),
    ].join
    mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
    mets_fptr['FILEID'] = fileid
    mets_div.add_child mets_fptr

    mets_file = Nokogiri::XML::Node.new 'mets:file', mets
    mets_file['ID'] = fileid
    mets_file['USE'] = 'print image'
    mets_fileGrp.add_child mets_file

    mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
    mets_flocat['xlink:href'] = target_pdf
    mets_flocat['LOCTYPE'] = 'OTHER'
    mets_file.add_child mets_flocat

    # reference image
    target_ref = File.join(idno, sprintf("page_#{pattern}.jpg", page_number))
    fileid = [
        'ReferenceImageFile',
        Digest::MD5.hexdigest(target_ref),
    ].join
    mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
    mets_fptr['FILEID'] = fileid
    mets_div.add_child mets_fptr

    mets_file = Nokogiri::XML::Node.new 'mets:file', mets
    mets_file['ID'] = fileid
    mets_file['USE'] = 'reference image'
    mets_fileGrp.add_child mets_file

    mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
    mets_flocat['xlink:href'] = target_ref
    mets_flocat['LOCTYPE'] = 'OTHER'
    mets_file.add_child mets_flocat

    # front thumbnail
    target_front = File.join(idno, sprintf("page_#{pattern}_ftb.jpg", page_number))
    fileid = [
        'FrontThumbnailFile',
        Digest::MD5.hexdigest(target_front),
    ].join
    mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
    mets_fptr['FILEID'] = fileid
    mets_div.add_child mets_fptr

    mets_file = Nokogiri::XML::Node.new 'mets:file', mets
    mets_file['ID'] = fileid
    mets_file['USE'] = 'front thumbnail'
    mets_fileGrp.add_child mets_file

    mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
    mets_flocat['xlink:href'] = target_front
    mets_flocat['LOCTYPE'] = 'OTHER'
    mets_file.add_child mets_flocat

    # thumbnail
    target_thumb = File.join(idno, sprintf("page_#{pattern}_tb.jpg", page_number))
    fileid = [
        'ThumbnailFile',
        Digest::MD5.hexdigest(target_thumb),
    ].join
    mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
    mets_fptr['FILEID'] = fileid
    mets_div.add_child mets_fptr

    mets_file = Nokogiri::XML::Node.new 'mets:file', mets
    mets_file['ID'] = fileid
    mets_file['USE'] = 'thumbnail'
    mets_fileGrp.add_child mets_file

    mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
    mets_flocat['xlink:href'] = target_thumb
    mets_flocat['LOCTYPE'] = 'OTHER'
    mets_file.add_child mets_flocat

    # OCR if needed
    if opts[:ocr]
        target_ocr = File.join(idno, sprintf("page_#{pattern}.txt", page_number))
        fileid = [
            'OcrFile',
            Digest::MD5.hexdigest(target_ocr),
        ].join
        mets_fptr = Nokogiri::XML::Node.new 'mets:fptr', mets
        mets_fptr['FILEID'] = fileid
        mets_div.add_child mets_fptr

        mets_file = Nokogiri::XML::Node.new 'mets:file', mets
        mets_file['ID'] = fileid
        mets_file['USE'] = 'ocr'
        mets_fileGrp.add_child mets_file

        mets_flocat = Nokogiri::XML::Node.new 'mets:FLocat', mets
        mets_flocat['xlink:href'] = target_ocr
        mets_flocat['LOCTYPE'] = 'OTHER'
        mets_file.add_child mets_flocat
    end

    label = order.to_s

    mets_div['TYPE'] = 'item'
    mets_div['LABEL'] = label
    mets_div['ORDER'] = order
    mets_structMap.add_child mets_div
end

dip_mets_path = File.join(data_dir, 'mets.xml')
File.open(dip_mets_path, 'w') do |f|
    f.write mets.to_xml(index: 2)
end

#############################################################################
# Add other supported types above this section (and update SUPPORTED_TYPES).
end
